//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Building"",
            ""id"": ""9ad0bd0d-7dbd-4632-964c-504018eb3ff0"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ec126570-a574-4cd4-b0d8-b9643b8280da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86ac4a05-39d0-490c-90fa-7fc422dab515"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Playing"",
            ""id"": ""9a961541-d16b-4b91-9f6e-e76fe58f2ac5"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""044c8fb6-bef3-4615-ac84-1b2fabed70ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pausing"",
                    ""type"": ""Button"",
                    ""id"": ""8d2d0ef6-2395-4838-bbfc-8151b91e83c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f167364-7ae9-4839-8c3d-d357798b45e4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5852042-e883-4a84-ba8e-19ba7217dbe2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pausing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_Newaction = m_Building.FindAction("New action", throwIfNotFound: true);
        // Playing
        m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
        m_Playing_Attack = m_Playing.FindAction("Attack", throwIfNotFound: true);
        m_Playing_Pausing = m_Playing.FindAction("Pausing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Building
    private readonly InputActionMap m_Building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_Building_Newaction;
    public struct BuildingActions
    {
        private @Controls m_Wrapper;
        public BuildingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Building_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public BuildingActions @Building => new BuildingActions(this);

    // Playing
    private readonly InputActionMap m_Playing;
    private IPlayingActions m_PlayingActionsCallbackInterface;
    private readonly InputAction m_Playing_Attack;
    private readonly InputAction m_Playing_Pausing;
    public struct PlayingActions
    {
        private @Controls m_Wrapper;
        public PlayingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Playing_Attack;
        public InputAction @Pausing => m_Wrapper.m_Playing_Pausing;
        public InputActionMap Get() { return m_Wrapper.m_Playing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayingActions instance)
        {
            if (m_Wrapper.m_PlayingActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnAttack;
                @Pausing.started -= m_Wrapper.m_PlayingActionsCallbackInterface.OnPausing;
                @Pausing.performed -= m_Wrapper.m_PlayingActionsCallbackInterface.OnPausing;
                @Pausing.canceled -= m_Wrapper.m_PlayingActionsCallbackInterface.OnPausing;
            }
            m_Wrapper.m_PlayingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Pausing.started += instance.OnPausing;
                @Pausing.performed += instance.OnPausing;
                @Pausing.canceled += instance.OnPausing;
            }
        }
    }
    public PlayingActions @Playing => new PlayingActions(this);
    public interface IBuildingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlayingActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnPausing(InputAction.CallbackContext context);
    }
}
